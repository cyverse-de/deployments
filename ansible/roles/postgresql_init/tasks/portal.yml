---
- delegate_to: localhost
  block:
    - name: create the portal reader database user
      community.postgresql.postgresql_user:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "{{ pg_db }}"
        name: "{{ portal_db_reader_user }}"
        password: "{{ portal_db_reader_password }}"
      when: create_user is defined and create_user

    - name: create the portal db user
      community.postgresql.postgresql_user:
        login_host: "{{ groups['dbms'][0] }}"
        login_port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "{{ pg_db }}"
        name: "{{ portal_database_user }}"
        password: "{{ portal_database_password }}"
      when: create_user is defined and create_user

    - name: create the portal database
      community.postgresql.postgresql_db:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        name: "{{ portal_db_name }}"
        owner: "{{ portal_database_user }}"
        encoding: "{{ encoding }}"
        lc_collate: "{{ lc_collate }}"
        lc_ctype: "{{ lc_ctype }}"
        template: "{{ template }}"
      when: create_dbs is defined and create_dbs

    - name: grant all privileges to the portal user
      community.postgresql.postgresql_privs:
        login_host: "{{groups['dbms'][0]}}"
        port: "{{pg_listen_port}}"
        login_user: "{{pg_login_user}}"
        login_password: "{{pg_login_password}}"
        login_db: "{{portal_db_name}}"
        grant_option: true
        privs: ALL
        type: schema
        objs: public
        role: "{{portal_database_user}}"

    - name: grant connect privileges to the portal_db_reader user
      community.postgresql.postgresql_privs:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{pg_login_user}}"
        login_password: "{{pg_login_password}}"
        login_db: "{{portal_db_name}}"
        privs: CONNECT
        type: database
        objs: "{{portal_db_name}}"
        role: "{{portal_db_reader_user}}"

    - name: grant USAGE privileges to the portal_db_reader user
      community.postgresql.postgresql_privs:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{pg_login_user}}"
        login_password: "{{pg_login_password}}"
        login_db: "{{portal_db_name}}"
        privs: USAGE
        type: schema
        objs: public
        role: "{{portal_db_reader_user}}"

    - name: grant read-only privileges to the portal_db_reader user
      community.postgresql.postgresql_privs:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{pg_login_user}}"
        login_password: "{{pg_login_password}}"
        login_db: "{{portal_db_name}}"
        privs: SELECT
        type: tables
        objs: ALL_IN_SCHEMA
        schema: public
        role: "{{portal_db_reader_user}}"

    - name: allow access to future tables to portal_db_reader user
      community.postgresql.postgresql_privs:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{pg_login_user}}"
        login_password: "{{pg_login_password}}"
        login_db: "{{portal_db_name}}"
        privs: SELECT
        type: default_privs
        objs: tables
        schema: public
        role: "{{portal_db_reader_user}}"

    - name: install extensions for the portal database
      when: install_exts is defined and install_exts
      community.postgresql.postgresql_ext:
        login_host: "{{ groups['dbms'][0] }}"
        port: "{{ pg_listen_port }}"
        login_user: "{{ pg_login_user }}"
        login_password: "{{ pg_login_password }}"
        db: "{{ portal_db_name }}"
        name: "{{item}}"
      loop:
        - moddatetime
        - btree_gist
        - insert_username

    - name: checkout the portal repo for its migrations
      ansible.builtin.git:
        repo: "https://gitlab.com/cyverse/portal2"
        dest: "{{ dbs_dir.path }}/portal2"
        clone: yes
        update: yes
        force: yes
        version: "{{ portal_version }}"

    - name: run portal repo migrations
      ansible.builtin.command: >
        {{migrate_installed.stdout}}
        -database "postgresql://{{portal_database_user}}:{{portal_database_password}}@{{ groups['dbms'][0] }}:{{ pg_listen_port }}/{{portal_db_name}}?sslmode=disable"
        -path "{{ dbs_dir.path }}/portal2/migrations"
        up
      when: migrate is defined and migrate

    - name: check out the grid csv files
      ansible.builtin.git:
        repo: "{{grid_csv_repo}}"
        dest: "{{dbs_dir.path}}/grid_institutions"
        clone: yes
        update: yes
        force: yes
        version: "{{grid_csv_version}}"

    - name: check for the 'Other' record in account_institution_grid
      community.postgresql.postgresql_query:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{portal_database_user}}"
        login_password: "{{portal_database_password}}"
        login_db: "{{portal_db_name}}"
        query: SELECT grid_id FROM account_institution_grid WHERE name = 'Other'
      register: other_result

    - debug:
        msg: "{{other_result}}"

    - name: insert the Other field into the account_institution_grid table
      when: other_result.rowcount == 0
      community.postgresql.postgresql_query:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{portal_database_user}}"
        login_password: "{{portal_database_password}}"
        login_db: "{{portal_db_name}}"
        query: INSERT INTO account_institution_grid (grid_id,name,city,state,country) VALUES ('', 'Other','','','') ON CONFLICT (grid_id) DO NOTHING

    - name: check for records in account_institution_grid
      community.postgresql.postgresql_query:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{portal_database_user}}"
        login_password: "{{portal_database_password}}"
        login_db: "{{portal_db_name}}"
        query: SELECT COUNT(*) AS record_count FROM account_institution_grid
      register: records_result

    - debug:
        msg: "{{records_result}}"

    - name: copy grid.csv data into the account_institution_grid table
      when: records_result["query_result"][0]["record_count"] <= 1
      community.postgresql.postgresql_copy:
        login_host: "{{groups['dbms'][0]}}"
        login_port: "{{pg_listen_port}}"
        login_user: "{{portal_database_user}}"
        login_password: "{{portal_database_password}}"
        login_db: "{{portal_db_name}}"
        copy_from: "{{dbs_dir.path}}/grid_institutions/grid.csv"
        dst: account_institution_grid
        columns: grid_id,name,city,state,country
        options:
          format: csv
          header: True
      register: copy_result

    - debug:
        msg: "{{copy_result}}"
